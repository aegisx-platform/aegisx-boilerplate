services:
  # API Application
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: aegisx-api
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: aegisx_db
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DB_SSL: false
      DB_POOL_MIN: 2
      DB_POOL_MAX: 10
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD:
      REDIS_DB: 0
      REDIS_TTL: 900
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      AUDIT_RABBITMQ_EXCHANGE: audit.logs
      AUDIT_RABBITMQ_QUEUE: audit.logs.queue
      # Storage Configuration
      STORAGE_PROVIDER: ${STORAGE_PROVIDER:-local}
      STORAGE_ENABLED: ${STORAGE_ENABLED:-true}
      STORAGE_LOCAL_BASE_PATH: ${STORAGE_LOCAL_BASE_PATH:-/app/storage/files}
      STORAGE_LOCAL_MAX_FILE_SIZE: ${STORAGE_LOCAL_MAX_FILE_SIZE:-104857600}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-minio}
      MINIO_PORT: ${MINIO_PORT:-9000}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-aegisx}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-aegisx123}
      MINIO_BUCKET: ${MINIO_BUCKET:-aegisx-files}
      MINIO_USE_SSL: ${MINIO_USE_SSL:-false}
    volumes:
      - ./storage/local:/app/storage/files
    networks:
      - aegisx-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    # Keep container running for manual migration commands
    tty: true
    stdin_open: true
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3000/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:16-alpine
    container_name: aegisx-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: aegisx_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: '--encoding=UTF8 --locale=C'
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - aegisx-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d aegisx_db']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres-test:
    image: postgres:16-alpine
    container_name: aegisx-postgres-test
    restart: unless-stopped
    environment:
      POSTGRES_DB: aegisx_db_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: '--encoding=UTF8 --locale=C'
    ports:
      - '5433:5432'
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - aegisx-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d aegisx_db_test']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: aegisx-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - aegisx-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # RabbitMQ for message queuing
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: aegisx-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - '5672:5672'   # AMQP port
      - '15672:15672' # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - aegisx-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: aegisx-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-aegisx}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-aegisx123}
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    ports:
      - '9000:9000'   # MinIO API port
      - '9001:9001'   # MinIO Console port
    volumes:
      - minio_data:/data
      - ./storage/minio:/data
    networks:
      - aegisx-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: aegisx-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@aegisx.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - '8080:80'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - aegisx-network
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local
  postgres_test_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  minio_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  aegisx-network:
    driver: bridge
